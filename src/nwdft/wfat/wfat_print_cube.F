c=================================================
c=================================================
      subroutine wfat_print_cube(name0, iunit, np, xr, yr, zr, geom,
     &     bas, cf, isnorm)

      implicit none
#include "stdio.fh"
#include "errquit.fh"
#include "global.fh"
#include "bas.fh"
#include "mafdecls.fh"
#include "geom.fh"
#include "wfat_qm_param.fh"
      character*255 name0      ! [input],
      integer iunit            ! [input],
      integer np(3)            ! [input],
      double precision xr(2)   ! [input], in bohr
      double precision yr(2)   ! [input], in bohr
      double precision zr(2)   ! [input], in bohr
      integer geom             ! [input],
      integer bas              ! [input],
      double precision cf(1:*) ! [input],
      logical isnorm           ! [input],

      character*12 s
      character*255 fname
      character*16 tag
      integer ndid, natom, nb, i, ix, iy, iz, l_ov, k_ov
      double precision atp(3), zn, dx(3), dy(3), dz(3), orig(3), wfn
      double precision vpt(3), norm


      call ga_sync()
      ndid = ga_nodeid()

      call util_file_name(trim(adjustl(name0))//'.cube',
     &     .false., .false., fname)
      if (ndid==0) open(iunit, file=fname, action='write')
      if (ndid==0) write(iunit, '(2x, a)')
     &     "Cube file generated by NWChem's WFAT module"
      s = 'Unnormalized'
      if (isnorm) s = 'Normalized'
      if (ndid==0) write(iunit, '(2x, a)')
     &     trim(adjustl(s))//" wavefunction cube file"

      
c     ==== No. of atoms and origin ====
      if (.not. geom_ncent(geom, natom))
     &     call errquit('MEWFAT: Getting natom failed', 27, GEOM_ERR)
      orig = (/ xr(1), yr(1), zr(1) /)
      if (ndid==0) write(iunit, '(2x, i4, 3es13.5)') natom, orig


c     ==== No. of voxels ====
      dx = 0.0d0
      dy = 0.0d0
      dz = 0.0d0
      dx(1) = (xr(2) - xr(1)) / (np(1) - 1)
      dy(2) = (yr(2) - yr(1)) / (np(2) - 1)
      dz(3) = (zr(2) - zr(1)) / (np(3) - 1)
      if (ndid==0) write(iunit, '(2x, i4, 3es13.5)') np(1), dx
      if (ndid==0) write(iunit, '(2x, i4, 3es13.5)') np(2), dy
      if (ndid==0) write(iunit, '(2x, i4, 3es13.5)') np(3), dz


c     ==== Atomic coordinates ====
      do i = 1, natom
         if (.not. geom_cent_get(geom, i, tag, atp, zn))
     &        call errquit('WFAT: Getting znuc failed', 52, GEOM_ERR)
         if (ndid==0) write(iunit, '(2x, i4, 4es13.5)')
     &        int(zn), 0.0d0, atp
      enddo
      if (.not. bas_numbf(bas, nb))
     &     call errquit('WFAT: Getting nb failed', 44, UERR)


c     ==== Normalization ====
      if (isnorm) then
         if (.not. MA_alloc_get(MT_DBL, nb**2, 'ovl', l_ov, k_ov))
     &        call errquit('WFAT: Cannot allocate ovl.', 62, MA_ERR)
         call ga_get(gwf_ovl, 1, nb, 1, nb, dbl_mb(k_ov), nb)
         call wfat_1e_expval_1eopr(nb, cf, dbl_mb(k_ov), norm)
      else
         norm = 1.0d0
      endif

      
c     ==== Print the wavefunction ====
      do ix = 1, np(1)
         do iy = 1, np(2)
            do iz = 1, np(3)               
               
c              ==== Evaluate the wavefunction ====
               vpt(1) = xr(1) + (ix-1)*dx(1)
               vpt(2) = yr(1) + (iy-1)*dy(2)
               vpt(3) = zr(1) + (iz-1)*dz(3)
               call wfat_eval_vector(geom, bas, vpt, cf, wfn)
               
c              ==== Normalize if requested ====
               if (isnorm) then
                  wfn = wfn / sqrt(norm)
               endif

               if (ndid==0) write(iunit, '(" ")', advance='no')
               if (ndid==0) write(iunit, '(1x, e13.5)', advance='no')
     &              wfn
               if (mod(iz,6)==0) then
                  if (ndid==0) write(iunit, '(" ")')
               endif
               
            enddo
            if (ndid==0) write(iunit, '(" ")')
         enddo
      enddo
      
      if (ndid==0) close(iunit)


      if (isnorm) then
         if (.not. MA_free_heap(l_ov))
     &        call errquit('WFAT: ovl deallocation failed', 44, MA_ERR)
      endif
      call ga_sync()

      end
c=================================================
      
