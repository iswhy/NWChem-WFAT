c===============================================================
c===============================================================
      subroutine wfat_perturb_rs(rtdb, bt, gm, ef, nch, orbid, sid,
     &     res_mode)

      implicit none
#include "mafdecls.fh"
#include "global.fh"
#include "errquit.fh"
#include "wfat_qm_param.fh"
#include "stdio.fh"
      integer rtdb
      double precision bt
      double precision gm
      double precision ef
      integer nch
      integer orbid(nch)
      integer sid(nch)
      logical res_mode

      character*9 movname(2)
      character*8 dipname(3)
      character*7 hiname(2)
      integer nv0, ne0, nv1, ne1, nv, ne, nov, npo
      integer l_v0, l_e0, l_v1, l_e1, l_v, l_e, l_ov, l_po0, l_po
      integer k_v0, k_e0, k_v1, k_e1, k_v, k_e, k_ov, k_po0, k_po
      integer i_v0, i_v1, i_v, i, ich, is, ndid, ia, i_po, i_po0
      integer l_max, l_maxi, k_max, k_maxi
      integer g_dp(3), g_hi, g_mov2(nspin0), g_mohi(nspin0), g_s
      double precision rotmat(3,3), zunit(3), ef_vec(3), norm
      double precision dgnthr, offthr, ov01, prc, norm0, norm1

      parameter (dgnthr=1.0d-6, offthr=1.0d-10)

      
      ndid = ga_nodeid()

      
      
      movname = (/ 'mov_alpha', 'mov_beta' /)      
      dipname = (/ 'dipole_x', 'dipole_y', 'dipole_z' /)
      hiname = (/ 'h_int_a', 'h_int_b' /)
      zunit = (/ 0.0d0, 0.0d0, 1.0d0 /)


c     ==== Calculate 0th order ionized orbitals and energies ====
      nv0 = nbas0 * nch
      if (.not. ma_alloc_get(mt_dbl, nv0, 'vcf_o0', l_v0, k_v0))
     &     call errquit('WFAT: Cannot allocate vcf_o0', 1, MA_ERR)
      ne0 = nch
      if (.not. ma_alloc_get(mt_dbl, ne0, 'erg_o0', l_e0, k_e0))
     &     call errquit('WFAT: Cannot allocate erg_o0', 1, MA_ERR)
      call wfat_get_coef(nch, orbid, sid, dbl_mb(k_v0), dbl_mb(k_e0))      ! WRONG. 0th order MO's are not yet degeneracy-adapted at this point.

      
c     ==== Calculate e. field vector in molecular frame ====
      call wfat_passrot(bt, gm, rotmat)
      ef_vec = matmul(transpose(rotmat), ef*zunit)
      if (ndid == 0) then
         write(luout, '("ef = ", es14.6)') ef
         write(luout, '("rotmat = ", 9es14.6)') rotmat
      endif
      if (ndid==0) write(luout, '("ef_vec = ", 3es14.6)') ef_vec


c     ==== Calculate dipole interaction Hamiltonian ====
      do i = 1, 3
         if (.not. ga_duplicate(g_mov(1), g_dp(i), dipname(i)))
     &        call errquit('WFAT: Cannot duplicate '//dipname(i)//'.',
     &        1, GA_ERR)
         call ga_zero(g_dp(i))
      enddo
      call int_dip_ga(bas_hd, bas_hd, g_dp(1), g_dp(2), g_dp(3))

      if (.not. ga_create(mt_dbl, nbas0, nbas0, 'H_int', 0, 0, g_hi))
     &     call errquit('WFAT: Cannot create H_int.', 1, GA_ERR)
      call ga_zero(g_hi)
      do i = 1, 3
cforcheck         if (ndid==0) write(luout, '("Dipole :", i1)') i
cforcheck         call ga_print(g_dp(i))
         call ga_add(1.0d0, g_hi, ef_vec(i), g_dp(i), g_hi)
      enddo
cforcheck      if (ndid==0) write(luout, '("h_int :")')
cforcheck      call ga_print(g_hi)

      do i = 1, 3
         if (.not. ga_destroy(g_dp(i)))
     &        call errquit('WFAT: Cannot destroy '//dipname(i)//'.',
     &        1, GA_ERR)
      enddo


c     ==== Generate new MO's based on degeneracy ====
      do is = 1, nspin0
         if (.not. ga_duplicate(g_mov(is), g_mov2(is), movname(is)))
     &        call errquit('WFAT: Cannot duplicate '//movname(is)//'.',
     &        1, GA_ERR)
         call ga_copy(g_mov(is), g_mov2(is))
      enddo      
      call wfat_diag_perturb(nbas0, nspin0, g_mov2, dbl_mb(k_moerg), 
     &     g_hi, dgnthr, offthr)


c     ==== Calculate H_int matrix in the new MO basis ====
      do is = 1, nspin0
cforcheck         if (ndid==0)
cforcheck     &        write(luout, '("Adapted ", a, " coefficients :")')
cforcheck     &        trim(adjustl(movname(is)))    
cforcheck         call ga_print(g_mov2(is))
         
         if (.not. ga_duplicate(g_hi, g_mohi(is), hiname(is)))
     &        call errquit('WFAT: Cannot create '//hiname(is)//'.',
     &        1, GA_ERR)
         call ga_zero(g_mohi(is))
         call wfat_ga_vrepresent(g_mov2(is), g_hi, g_mohi(is))

         if (ndid==0)
     &        write(luout, '("Matrix of dipole interaction '//
     &        'Hamiltonian in the adapted ", a, " representation :")')
     &        trim(adjustl(movname(is)))
         call ga_print(g_mohi(is))
      enddo

      
c     ==== Calculate 1st order correction to ionized orbitals ====      
      nv1 = nbas0 * nch
      if (.not. ma_alloc_get(mt_dbl, nv1, 'vcf_o1', l_v1, k_v1))
     &     call errquit('WFAT: Cannot allocate vcf_o1', 1, MA_ERR)
      ne1 = nch
      if (.not. ma_alloc_get(mt_dbl, ne1, 'erg_o1', l_e1, k_e1))
     &     call errquit('WFAT: Cannot allocate erg_o1', 1, MA_ERR)
      if (.not. ma_alloc_get(mt_dbl, nch, 'max_coef', l_max, k_max))
     &     call errquit('WFAT: Cannot allocate max_coef', 1, MA_ERR)
      if (.not. ma_alloc_get(mt_int, ne1, 'max_coef_i', l_maxi, k_maxi))
     &     call errquit('WFAT: Cannot allocate max_coef_i', 1, MA_ERR)
      call wfat_perturb_1st(bt, gm, ef, bas_hd, nbas0, nspin0, g_mov2,
     &                      dbl_mb(k_moerg), nch, orbid, sid, g_mohi,
     &                      dgnthr, dbl_mb(k_max), int_mb(k_maxi),
     &                      dbl_mb(k_v1), dbl_mb(k_e1))
      

c     ==== Calculate corrected ionized orbitals and energies ====
      nv = nbas0 * nch
      if (.not. ma_alloc_get(mt_dbl, nv, 'vcf', l_v, k_v))
     &     call errquit('WFAT: Cannot allocate vcf', 1, MA_ERR)
      ne = nch
      if (.not. ma_alloc_get(mt_dbl, ne, 'erg', l_e, k_e))
     &     call errquit('WFAT: Cannot allocate erg', 1, MA_ERR)
      dbl_mb(k_v:k_v+nv-1) = dbl_mb(k_v0:k_v0+nv0-1) +
     &                       dbl_mb(k_v1:k_v1+nv1-1)
      dbl_mb(k_e:k_e+ne-1) = dbl_mb(k_e0:k_e0+ne0-1) +
     &                       dbl_mb(k_e1:k_e1+ne1-1)

      
c     ==== Renormalize corrected ionized orbitals ====
      if (.not. ga_duplicate(g_hi, g_s, 'overlap'))
     &     call errquit('WFAT: Cannot duplicate overlap.', 1, GA_ERR)
      call ga_zero(g_s)
      call int_1e_ga(bas_hd, bas_hd, g_s, 'overlap', oskel)
      nov = nbas0 * nbas0
      if (.not. ma_alloc_get(mt_dbl, nov, 'overlap', l_ov, k_ov))
     &     call errquit('WFAT: Cannot allocate overlap', 1, MA_ERR)
      call ga_get(g_s, 1, nbas0, 1, nbas0, dbl_mb(k_ov), nbas0)
      
      do ich = 1, nch
         i_v = k_v + (ich-1)*nbas0
         call wfat_mat_element(nbas0, dbl_mb(i_v), dbl_mb(i_v),
     &        dbl_mb(k_ov), norm)
         dbl_mb(i_v:i_v+nbas0-1) = dbl_mb(i_v:i_v+nbas0-1) / sqrt(norm)
      enddo
      

c     ==== Analysis ====
      npo = natm * nch
      if (.not. ma_alloc_get(mt_dbl, npo, 'pop0', l_po0, k_po0))
     &     call errquit('WFAT: Cannot allocate pop0', 1, MA_ERR)
      if (.not. ma_alloc_get(mt_dbl, npo, 'ovl_pop', l_po, k_po))
     &     call errquit('WFAT: Cannot allocate ovl_pop', 1, MA_ERR)
      do ich = 1, nch
         i_v = k_v + (ich-1)*nbas0
         i_v0 = k_v0 + (ich-1)*nbas0
         i_v1 = k_v1 + (ich-1)*nbas0

         if (ndid==0) then
            write(luout, '(" ")')
            write(luout, '(3x, "Channel ", i4)') ich
         endif
         
         
c        ==== Calculate < v^(0) | v^(0) > ====
         call wfat_mat_element(nbas0, dbl_mb(i_v0), dbl_mb(i_v0),
     &        dbl_mb(k_ov), norm0)


c        ==== Calculate < v^(1) | v^(1) > ====
         call wfat_mat_element(nbas0, dbl_mb(i_v1), dbl_mb(i_v1),
     &        dbl_mb(k_ov), norm1)


c        ==== Calculate < v^(0) | v^(1) > ====
         call wfat_mat_element(nbas0, dbl_mb(i_v0), dbl_mb(i_v1),
     &        dbl_mb(k_ov), ov01)
         

c        ==== Print norms and overlap ====
         if (ndid == 0) then
            write(luout, '(5x, "Norm of 0th order correction = ", '//
     &           'es14.6)') sqrt(norm0)
            write(luout, '(5x, "Norm of 1st order correction = ", '//
     &           'es14.6)') sqrt(norm1)
            write(luout, '(5x, "Overlap between 0th and 1st = ", '//
     &           'es14.6)') ov01
            write(luout, '(5x, "Original norm of corrected '//
     &           'orbital = ", es14.6)') sqrt(norm)
         endif


c        ==== Print coefficients ====
cforcheck         if (ndid==0) then
cforcheck            write(luout, '(5x, "Coefficients of 1st order correction")')
cforcheck            call wfat_dprintmat(1, nbas0, 'e', dbl_mb(i_v1))
cforcheck            write(luout, '(5x, "Coefficients of normalized corrected")')
cforcheck            call wfat_dprintmat(1, nbas0, 'e', dbl_mb(i_v))
cforcheck         endif
         

c        ==== Print Energies ====
         if (ndid == 0) then
            write(luout, '(5x, "Energy of 0th order correction = ", '//
     &           'es14.6)') dbl_mb(k_e0+ich-1)
            write(luout, '(5x, "Energy of 1st order correction = ", '//
     &           'es14.6)') dbl_mb(k_e1+ich-1)
            write(luout, '(5x, "Corrected energy = ", '//
     &           'es14.6)') dbl_mb(k_e+ich-1)
            write(luout, '(5x, "Max. | <m|H_int|n>/(e_m-e_n) | = ", '//
     &           'es14.6, ", occuring with orbital no. :", i4)')
     &            dbl_mb(k_max+ich-1), int_mb(k_maxi+ich-1)
         endif



         i_po = k_po + (ich-1)*natm
         call wfat_matelm_mulliken(bas_hd, dbl_mb(k_ov), dbl_mb(i_v0),
     &        dbl_mb(i_v), geom_hd, dbl_mb(i_po))
         i_po0 = k_po0 + (ich-1)*natm
         call wfat_matelm_mulliken(bas_hd, dbl_mb(k_ov), dbl_mb(i_v0),
     &        dbl_mb(i_v0), geom_hd, dbl_mb(i_po0))
         if (ndid == 0) then
            write(luout, '(5x, "Uncorrected atom population :  ")',
     &           advance='no')
            call util_flush(luout)
            do ia = 1, natm
               write(luout, '(f14.6)', advance='no') dbl_mb(i_po0+ia-1)
               call util_flush(luout)
            enddo
            write(luout, '(" ")')
            
            write(luout, '(5x, "Corrected atom population :    ")',
     &           advance='no')
            call util_flush(luout)
            do ia = 1, natm
               write(luout, '(f14.6)', advance='no') dbl_mb(i_po+ia-1)
               call util_flush(luout)
            enddo
            write(luout, '(" ")')

            write(luout, '(5x, "Percentage population change : ")',
     &           advance='no')
            call util_flush(luout)
            do ia = 1, natm
               prc = abs(dbl_mb(i_po+ia-1) / dbl_mb(i_po0+ia-1))
               write(luout, '(f14.6)', advance='no') prc
               call util_flush(luout)
            enddo
            write(luout, '(" ")')
         endif
      enddo


c     ==== Print xy-integrated density ====
      if (res_mode) then
         call wfat_print_dens_integxy(rtdb, nch, dbl_mb(k_v))
      endif
      
         
c     ==== Deallocations ====
      if (.not. ma_free_heap(l_po0))
     &     call errquit('WFAT: Cannot deallocate pop0', 1, MA_ERR)
      if (.not. ma_free_heap(l_po))
     &     call errquit('WFAT: Cannot deallocate pop', 1, MA_ERR)
      do is = 1, nspin0
         if (.not. ga_destroy(g_mov2(is)))
     &        call errquit('WFAT: Cannot destroy '//movname(is)//'.',
     &        1, GA_ERR)
         if (.not. ga_destroy(g_mohi(is)))
     &        call errquit('WFAT: Cannot destroy '//hiname(is)//'.',
     &        1, GA_ERR)
      enddo
      if (.not. ga_destroy(g_s))
     &     call errquit('WFAT: Cannot destroy overlap.', 1, GA_ERR)
      if (.not. ga_destroy(g_hi))
     &     call errquit('WFAT: Cannot destroy dip_int.', 1, GA_ERR)
      if (.not. ma_free_heap(l_v0))
     &     call errquit('WFAT: Cannot deallocate vcf_o0', 1, MA_ERR)
      if (.not. ma_free_heap(l_e0))
     &     call errquit('WFAT: Cannot deallocate erg_o0', 1, MA_ERR)
      if (.not. ma_free_heap(l_v1))
     &     call errquit('WFAT: Cannot deallocate vcf_o1', 1, MA_ERR)
      if (.not. ma_free_heap(l_e1))
     &     call errquit('WFAT: Cannot deallocate erg_o1', 1, MA_ERR)
      if (.not. ma_free_heap(l_max))
     &     call errquit('WFAT: Cannot deallocate max_coef', 1, MA_ERR)
      if (.not. ma_free_heap(l_maxi))
     &     call errquit('WFAT: Cannot deallocate max_coef_i', 1, MA_ERR)
      if (.not. ma_free_heap(l_v))
     &     call errquit('WFAT: Cannot deallocate vcf', 1, MA_ERR)
      if (.not. ma_free_heap(l_e))
     &     call errquit('WFAT: Cannot deallocate erg', 1, MA_ERR)
      if (.not. ma_free_heap(l_ov))
     &     call errquit('WFAT: Cannot deallocate overlap', 1, MA_ERR)

      end
c===============================================================


c===============================================================
c===============================================================      
      subroutine wfat_perturb_1st(bt, gm, ef, bas, nb, ns, g_v, erg, 
     &           nch, orbid, sid, g_mohi, dgnthr, max_cc, max_cc_i,
     &           vcf_o1, erg_o1)

      implicit none
#include "mafdecls.fh"
#include "global.fh"
#include "errquit.fh"
#include "stdio.fh"      
      double precision bt               ! [input], beta Euler angle in degree.
      double precision gm               ! [input], gamma Euler angle in degree.
      double precision ef               ! [input], field strength in a.u. of electric field.
      integer bas                       ! [input], basis handle in which g_v is represented.
      integer nb                        ! [input], no. of basis functions in bas.
      integer ns                        ! [input], no. of spin channels.
      integer g_v(ns)                   ! [input], all MO's after degeneracy-based mixing.
      double precision erg(nb,ns)       ! [input], energy associated with MO's in g_v.
      integer nch                       ! [input], number of MO to be corrected.
      integer orbid(nch)                ! [input], indices of MO's in g_v whose correction is sought.
      integer sid(nch)                  ! [input], spin values of the MO's in g_v whose correction is sought.
      integer g_mohi(ns)                ! [input], interaction Hamiltonian.
      double precision dgnthr           ! [input], threshold criteria for degeneracies.
      double precision max_cc(nch)      ! [output], maximum value of |<m|H_int|n>/(e_n-e_m)>| for each n in orbid array.
      integer max_cc_i(nch)             ! [output], the orbital m corresponding to max_cc.
      double precision vcf_o1(nb, nch)  ! [output], first order correction of the MO's indicated by orbid and sid.
      double precision erg_o1(nch)      ! [output], first order correction of MO energy.
      
      character*9 movname(2)
      integer i, is, ich, j, ndid
      integer g_tmp, l_sc, k_sc
      double precision cc, delta_erg, hithr


      call ga_sync()
      ndid = ga_nodeid()
      hithr = abs(dgnthr) * 1.0d-4

      
      if (.not. ga_create(mt_dbl, nb, 1, 'ga_scratch', 0, 0, g_tmp))
     &     call errquit('WFAT: Cannot create scratch', 1, GA_ERR)
      if (.not. ma_alloc_get(mt_dbl, nb, 'ma_scratch', l_sc, k_sc))
     &     call errquit('WFAT: Cannot allocate scratch', 1, MA_ERR)
      
c     ==== Loop over user-requested orbitals ====
      do ich = 1, nch
         is = sid(ich)
         i = orbid(ich)

         call ga_get(g_mohi(is), 1, nb, i, i, dbl_mb(k_sc), nb)
         erg_o1(ich) = dbl_mb(k_sc+i-1)
         call ga_zero(g_tmp)
         max_cc(ich) = 0.0d0
         max_cc_i(ich) = -1000

         
c        ==== Loop over all MO's ====
         do j = 1, nb

c           ==== Calculate coefficient of psi^(1) in MO representation ====
            delta_erg = erg(i,is) - erg(j,is)
            if (abs(delta_erg) < dgnthr .and. 
     &           abs(dbl_mb(k_sc+j-1)) < hithr) then
               cc = 0.0d0
            else if (abs(delta_erg) < dgnthr .and. 
     &              abs(dbl_mb(k_sc+j-1)) >= hithr) then
               if (i == j) then
                  cc = 0.0d0
               else
                  call errquit('WFAT: MO have not been adapted for '//
     &                 'degeneracies before calling wfat_perturb_1st.',
     &                 1, UERR)
               endif
            else
               cc = dbl_mb(k_sc+j-1) / delta_erg
            endif            

            if (abs(cc) > max_cc(ich)) then
               max_cc(ich) = abs(cc)
               max_cc_i(ich) = j
            endif

c           ==== Calculate psi^(1) in basis set representation ====
            call ga_add_patch(
     &           1.0d0, g_tmp,   1, nb, 1, 1,
     &           cc,    g_v(is), 1, nb, j, j,
     &           g_tmp, 1, nb, 1, 1)
         enddo

         
c        ==== Copy psi^(1) to local array ====
         call ga_get(g_tmp, 1, nb, 1, 1, vcf_o1(1,ich), nb)
      enddo


      if (.not. ga_destroy(g_tmp))
     &     call errquit('WFAT: Cannot destroy scratch.', 1, GA_ERR)
      if (.not. ma_free_heap(l_sc))
     &     call errquit('WFAT: Cannot deallocate scratch.', 1, MA_ERR)

      call ga_sync()
      
      end
c===============================================================


c===============================================================
c===============================================================
      subroutine wfat_diag_perturb(nb, ns, g_v, erg, g_hi, thr, othr)

      implicit none
#include "mafdecls.fh"
#include "errquit.fh"
#include "global.fh"      
      integer nb
      integer ns
      integer g_v(ns)               ! [in/output], vectors in which degeneracies are searched for. COLUMNS OF g_v(1:ns) MUST BE ORTHONORMAL. 
      double precision erg(nb,ns)   ! [input], energies associated with g_v
      integer g_hi                  ! [input], interaction Hamiltonian in standard GTO basis
      double precision thr          ! [input], degeneracy threshold
      double precision othr         ! [input], off-diagonal threshold
      
      logical iscalc(nb, ns), isdiag
      integer g_v0, l_hi, k_hi, i_hi, l_ev, k_ev
      integer is, i, j, k1, k2, j1, j2
      integer ndg, dgid(nb)
      


      iscalc = .false.
      if (.not. ga_duplicate(g_v(1), g_v0, 'scratch'))
     &     call errquit('WFAT: Cannot duplicate scratch.', 1, GA_ERR)
      call ga_zero(g_v0)
      


      do is = 1, ns
         do i = 1, nb
            if (iscalc(i, is)) cycle

c           ==== Search for degeneracies ====
            ndg = 0
            do j = 1, nb
               if (abs(erg(i,is) - erg(j,is)) < thr) then
                  ndg = ndg + 1
                  dgid(ndg) = j
               endif
            enddo

c           ==== If degenerate, construct H_int in degenerate subspace  ====
            if (ndg > 1) then
               if (.not. ma_alloc_get(mt_dbl, ndg*ndg, 'h_int',
     &              l_hi, k_hi))
     &              call errquit('WFAT: Cannot allocate h_int',
     &              1, MA_ERR)
               if (.not. ma_alloc_get(mt_dbl, ndg, 'h_eval',
     &              l_ev, k_ev))
     &              call errquit('WFAT: Cannot allocate h_eval',
     &              1, MA_ERR)
               
               isdiag = .true.
               do k2 = 1, ndg
                  j2 = dgid(k2)
                  do k1 = 1, ndg
                     j1 = dgid(k1)
                     call ga_matmul_patch(
     &                    'n', 'n', 1.0d0, 0.0d0,
     &                    g_hi,    1, nb, 1,  nb,
     &                    g_v(is), 1, nb, j2, j2,
     &                    g_v0,    1, nb, 1,  1)

                     i_hi = k_hi + (k2-1)*ndg + k1 - 1
                     dbl_mb(i_hi) = ga_ddot_patch(
     &                          g_v(is), 'n', 1, nb, j1, j1,
     &                          g_v0,    'n', 1, nb, 1,  1)
                     
                     if (k1 /= k2 .and. abs(dbl_mb(i_hi)) > othr) then
                        isdiag = .false.
                     endif
                  enddo
               enddo
               call ga_scale_patch(g_v0, 1, nb, 1, 1, 0.0d0)

c              ==== Diagonalize H_int if not diagonal ====
               if (.not. isdiag) then
                  call wfat_dsyev_wrap(ndg, dbl_mb(k_hi), dbl_mb(k_ev))

c                 ==== Construct new degenerate vectors in basis rep. ====
                  do k2 = 1, ndg        ! Loop over new vectors
                     j2 = dgid(k2) 
                     do k1 = 1, ndg     ! Sum over old vectors
                        j1 = dgid(k1)

                        i_hi = k_hi + (k2-1)*ndg + k1 - 1
                        call ga_add_patch(
     &                       1.0d0,        g_v0,    1, nb, j2, j2,
     &                       dbl_mb(i_hi), g_v(is), 1, nb, j1, j1,
     &                       g_v0, 1, nb, j2, j2)
                     enddo
                  enddo

c                 ==== Replace the old with the new degenerate vectors ====
                  do k1 = 1, ndg
                     j1 = dgid(k1)
                     call ga_copy_patch('n',
     &                    g_v0, 1, nb, j1, j1, g_v(is), 1, nb, j1, j1)
                  enddo
               endif

               if (.not. ma_free_heap(l_hi))
     &              call errquit('WFAT: Cannot deallocate h_int',
     &              1, MA_ERR)
               if (.not. ma_free_heap(l_ev))
     &              call errquit('WFAT: Cannot deallocate h_eval',
     &              1, MA_ERR)
               
               do k1 = 1, ndg
                  iscalc( dgid(k1), is ) = .true.
               enddo

c           ==== If non-degenerate, do nothing ====
            else
               iscalc(i, is) = .true. 
            endif
            
         enddo
      enddo
      

      if (.not. ga_destroy(g_v0))
     &     call errquit('WFAT: Cannot destroy scratch.', 1, GA_ERR)
      
      end
c===============================================================
      


c===============================================================
c===============================================================
      subroutine wfat_perturb_info(type, ord, bt, gm, ef)

      implicit none
#include "errquit.fh"
#include "stdio.fh"      
      character*2 type
      integer ord
      double precision bt
      double precision gm
      double precision ef

      character*21 type0


      if (type == 'rs') then
         type0 = 'Rayleigh-Schroedinger'
      else if (type == 'bw') then
         type0 = 'Brillouin-Wigner'
      else
         call errquit('WFAT: The value of argument ''ord'' of '//
     &        '''wfat_perturb_info'' subroutine is illegal.', 1, UERR)
      endif
      
      write(luout, '(" ")')
      write(luout, '(20x, a16, " = ", a)') "type", type0
      write(luout, '(20x, a16, " = ", i2)') "correction order", ord
      write(luout, '(20x, a16, " = ", f10.6, " deg.")') "beta", bt
      write(luout, '(20x, a16, " = ", f10.6, " deg.")') "gamma", gm
      write(luout, '(20x, a16, " = ", es10.3, " a.u.")')
     &     "field strength", ef
      

      end
c===============================================================


c===============================================================
c===============================================================
      subroutine wfat_perturb_noinfo()

      implicit none
#include "stdio.fh"      


      write(luout, '(" ")')
      write(luout, 50)
 50   format(5x,
     &     "Nothing to be done for perturbation analysis, either ",
     &     "because the field strength is ", /,
     &     5x, 
     &     "too small or only structure factor calculation is ",
     &     "requested, in which case the ", /,
     &     5x,
     &     "input for field strength is omitted.")
      
      end
c===============================================================      
